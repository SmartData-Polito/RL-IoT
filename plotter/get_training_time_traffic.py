import os
import numpy as np
import csv

from config import GlobalVar


class GetTrainingTimeTraffic(object):
    def __init__(self, date_to_retrieve='YY_mm_dd_HH_MM_SS', target_output="algorithm.csv"):
        if date_to_retrieve != 'YY_mm_dd_HH_MM_SS':
            self.date_to_retrieve = date_to_retrieve  # Date must be in format %Y_%m_%d_%H_%M_%S
        else:
            print("Invalid date")
            exit(1)
        self.target_output = target_output

    def run(self):

        directory = GlobalVar.directory + 'output/log/'
        log_file = directory + 'log_' + self.date_to_retrieve + '.log'

        print(log_file)

        # Each non empty line is a sent command
        # Command of power is substituted by episode finishing line
        # Minus last line that is the total time

        counter_line = -1
        with open(log_file) as f:
            for line in f:
                if len(line.strip()) != 0:  # Not empty lines
                    counter_line += 1
            last_line = line

        secs = float(last_line.split()[3])
        np.set_printoptions(formatter={'float': lambda output: "{0:0.4f}".format(output)})

        print("Total lines", counter_line)
        print("Last line", last_line)
        print("Seconds", secs)

        if not os.path.isfile(self.target_output):  # If file does not exist
            # Write header
            with open(self.target_output, mode='w') as output_file:
                output_writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                output_writer.writerow(['Date', 'Training_time', 'Sent_commands'])

        with open(self.target_output, mode="a") as output_file:
            output_writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            output_writer.writerow([self.date_to_retrieve, secs, counter_line])


if __name__ == '__main__':
    # Get training time in seconds and traffic generated by training process, only sent commands
    # into a file that appends or writes:
    #
    # Date | Training time | Sent commands
    # date |           123 |           150

    # As input file I need only the log file
    # GetTrainingTimeTraffic(date_to_retrieve='2020_11_05_03_27_46', target_output='qlearning_lambda.csv').run()

    sarsa = ['2020_11_05_03_27_46',
             '2020_11_05_04_07_23',
             '2020_11_05_04_48_59',
             '2020_11_05_05_30_35',
             '2020_11_05_06_10_02', ]

    for dat in sarsa:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_sarsa.csv').run()

    sarsa_lambda = ['2020_11_05_06_47_59',
                    '2020_11_05_07_33_31',
                    '2020_11_05_08_04_47',
                    '2020_11_05_08_48_46',
                    '2020_11_05_09_35_46', ]

    for dat in sarsa_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_sarsa_lambda.csv').run()

    qlearning = ['2020_11_05_10_24_34',
                 '2020_11_05_11_05_37',
                 '2020_11_05_11_48_23',
                 '2020_11_05_12_33_03',
                 '2020_11_05_13_16_54', ]

    for dat in qlearning:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_qlearning.csv').run()

    qlearning_lambda = ['2020_11_05_13_54_50',
                        '2020_11_05_14_37_02',
                        '2020_11_05_15_10_00',
                        '2020_11_05_15_49_28',
                        '2020_11_05_16_27_15', ]

    for dat in qlearning_lambda:
        GetTrainingTimeTraffic(date_to_retrieve=dat, target_output='0_qlearning_lambda.csv').run()
