import os

import fastplot
import numpy as np
import csv
import matplotlib.pyplot

from config import GlobalVar


class PlotTrainingTimeTraffic(object):
    def __init__(self):
        pass

    def run(self):
        times = [[], [], [], []]
        traffic = [[], [], [], []]

        file_algo = ["sarsa", "sarsa_lambda", "qlearning", "qlearning_lambda"]

        for index, fa in enumerate(file_algo):
            with open(fa + ".csv", 'r') as csv_file:
                reader = csv.reader(csv_file, delimiter=',')
                next(reader, None)
                for row in reader:
                    times[index].append(float(row[1]))
                    traffic[index].append(int(row[2]))

        avg_times = [np.mean(times[0]), np.mean(times[1]), np.mean(times[2]),
                     np.mean(times[3])]
        std_dev_times = [np.std(times[0]), np.std(times[1]), np.std(times[2]),
                         np.std(times[3])]
        fig, ax = matplotlib.pyplot.subplots()
        col = ax.bar(["SARSA", "SARSA(位)", "Q-learning", "Q(位)"], avg_times, align='center',
                     yerr=std_dev_times, color=('#77FF82', '#47CC99', '#239DBA', '#006586'))

        # Add some text for labels, title and custom x-axis tick labels, etc.
        ax.set_ylabel('Time (s)')
        ax.set_title('Training time per algorithm')

        fig.tight_layout()

        matplotlib.pyplot.savefig('training_times.png')

        avg_traffic = [np.mean(traffic[0]), np.mean(traffic[1]), np.mean(traffic[2]),
                       np.mean(traffic[3])]
        std_dev_traffic = [np.std(traffic[0]), np.std(traffic[1]), np.std(traffic[2]),
                           np.std(traffic[3])]
        fig, ax = matplotlib.pyplot.subplots()
        col = ax.bar(["SARSA", "SARSA(位)", "Q-learning", "Q(位)"], avg_traffic, align='center',
                     yerr=std_dev_traffic, color=('#77FF82', '#47CC99', '#239DBA', '#006586'))

        # Add some text for labels, title and custom x-axis tick labels, etc.
        ax.set_ylabel('Number of sent commands')
        ax.set_title('Traffic generated per algorithm')

        fig.tight_layout()

        matplotlib.pyplot.savefig('training_traffic.png')


if __name__ == '__main__':
    # Get training time in seconds and traffic generated by training process, only sent commands
    # into a file that appends or writes:
    # Date | Training time | Sent commands
    # date | 123           |           150
    # As input file I need only the log file
    PlotTrainingTimeTraffic().run()

# 1 sarsa, 2 sarsa_lambda, 3 qlearning, 4 qlearning_lambda
